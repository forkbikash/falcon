# Include the OpenTelemetry module configuration
# include /etc/nginx/conf.d/opentelemetry_module.conf;

# to avoid nested if
map $http_service_id $upstream_grpc {
    "user" grpc://upstream-user-backend-grpc;
    "chat" grpc://upstream-chat-backend-grpc;
    "forwarder" grpc://upstream-forwarder-backend-grpc;
}

upstream upstream-chat-backend {
  # there can be multiple servers here and nginx load balances between these servers
  # here 127.0.0.1 is considered as container when nginx is running inside container
  server host.docker.internal:81;
}
upstream upstream-chat-backend-grpc {
  server host.docker.internal:4000;
}
upstream upstream-chat-web {
  server host.docker.internal:85;
}
upstream upstream-match-backend {
  server host.docker.internal:82;
}
upstream upstream-uploader-backend {
  server host.docker.internal:83;
}
upstream upstream-user-backend {
  server host.docker.internal:84;
}
upstream upstream-user-backend-grpc {
  server host.docker.internal:4002;
}
upstream upstream-forwarder-backend-grpc {
  server host.docker.internal:4001;
}

server {
  listen 80;
  server_name localhost;

  # Perform a 301 redirect with any parameters to the SSL server block below
  return 301 https://localhost$request_uri;
}

server {
  # Listen on port 443 for IPv4 with HTTP2 enabled (requires SSL)
  listen 443 ssl http2;

  # Listen on port 443 for IPv6 with HTTP2 enabled (requires SSL)
  # listen [::]:443 ssl http2;

  server_name localhost;

  # ssl on;

  # The location of the public and private certificate
  ssl_certificate /etc/ssl/certs/localhost.pem;
  ssl_certificate_key /etc/ssl/private/localhost.key;

  # listen 80;
  # for ipv6
  # listen [::]:80;

  # can be multiple server names here
  # server_name forkbikash.com;

  # access_log   /var/log/nginx/forkbikash.com;
  # client_max_body_size 10M;

  # Add the following line to enable error logging
  error_log /var/log/nginx/localhost.error.log;
  # records information about client requests to the server
  access_log /var/log/nginx/localhost.access.log;

  # for backend
  location /api {
    location /api/chat {
      location = /api/chat {
        proxy_pass http://upstream-chat-backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
      location /api/chat {
        # for grpc
        # grpc_pass upstream-chat-backend-grpc;

        # for http
        proxy_pass http://upstream-chat-backend;
        # for forwarding the original ip address of the client browser
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-Proto $scheme;

        # setting host header
        # proxy_set_header Host $host;
      }
    }

    location = /api/match {
      proxy_pass http://upstream-match-backend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    location /api/uploader {
      proxy_pass http://upstream-uploader-backend;
    }

    location /api/user {
      proxy_pass http://upstream-user-backend;
    }
  }

  # can be used like this as well if different endpoint prefix
  # location /grpc {
    # Proxy gRPC requests to the backend gRPC server
    # grpc_pass upstream-chat-backend-grpc;

    # grpc_set_header Host $host;
    # grpc_set_header X-Real-IP $remote_addr;
    # grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # grpc_set_header X-Forwarded-Proto $scheme;
  # }

  # for web
  location / {
    # grpc
    if ($http_content_type = "application/grpc") {
      grpc_pass $upstream_grpc;
      break;
    }
    # grpc_set_header content-type application/grpc;

    # = for exact match. if matches, no other location block will be executed
    location = / {
      proxy_pass http://upstream-chat-web;
    }
    location = /chat {
      proxy_pass http://upstream-chat-web;
    }
    # partial match. if matches, no other location block will be executed
    location ^~ /assets {
      proxy_pass http://upstream-chat-web;
    }
  }
}


# server context can have same listen port but with different server_name which is nothing but domain
# server {
#   listen 80;
#   server_name forkbikash2.com;
#   ...
# }
