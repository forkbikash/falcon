version: "3"
services:
  reverse-proxy:
    image: forkbikash/chat-reverse-proxy:kafka
    restart: "always"
    # network_mode: "host"
    # mem_limit: 128m
    # hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    extra_hosts:
      # - "localhost:127.0.0.1"
      # - "127.0.0.1:127.0.0.1"
      - "host.docker.internal:host-gateway"
    # depends_on:
    #   - chat-backend
    #   - web
    #   - match
    #   - uploader
    #   - user
    volumes:
      - /etc/ssl/certs/localhost.pem:/etc/ssl/certs/localhost.pem
      - /etc/ssl/private/localhost.key:/etc/ssl/private/localhost.key
  minio:
    image: minio/minio:RELEASE.2023-07-11T21-29-34Z
    volumes:
      - minio_data:/export
    command:
      - server
      - /export
      - --console-address
      - ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_API_ROOT_ACCESS: "on"
      # FQDN the MinIO Console should use for connecting to the MinIO Server
      MINIO_SERVER_URL: http://minio:9000
    ports:
      - "9000:9000"
      - "9001:9001"
  createbucket:
    image: minio/mc:RELEASE.2023-07-11T23-30-44Z
    restart: on-failure:5
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      set -e;
      /usr/bin/mc config host add myminio http://minio:9000 testaccesskey testsecret;
      /usr/bin/mc mb myminio/myfilebucket;
      /usr/bin/mc anonymous set private myminio/myfilebucket;
      exit 0;
      "
  prometheus:
    image: prom/prometheus:v2.45.0
    restart: always
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --enable-feature=exemplar-storage
    ports:
      - 9090:9090
  jaeger:
    image: jaegertracing/all-in-one:1.22
    restart: always
    ports:
      - 14268:14268
      - 16686:16686
  # redis cluster doesn't work in mac. so using redis without cluster mode
  redis:
    image: docker.io/bitnami/redis:7.2
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/bitnami/redis/data"
  kafka:
    image: docker.io/bitnami/kafka:3.6
    restart: unless-stopped
    ports:
      - "9092:9092"
    # hostname: localhost
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # when applications attempt to produce, consume, or fetch metadata for a non-existent topic,
      # Kafka will automatically create the topic with the default replication factor and number of partitions
      # which is true by default
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  cassandra:
    image: docker.io/bitnami/cassandra:4.0
    restart: always
    ports:
      - 9042:9042
    volumes:
      - cassandra_data:/bitnami
      # to run cql script inside cassandra container
      - ./cassandra:/docker-entrypoint-initdb.d
    environment:
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_USER=${CASSANDRA_USER}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
volumes:
  kafka_data:
    driver: local
  minio_data:
  cassandra_data:
  redis_data:
